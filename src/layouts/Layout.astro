---
interface Props {
  title: string
  description: string
  className: string
  pageSlug?: string
}
import { getLangFromUrl, useTranslations } from '../i18n/utils'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import '../styles/sass/styles.scss'
import { contentfulClient } from '../lib/contentful'
import type { TypeNeedHelpSkeleton } from '../types/contentful/TypeNeedHelp'
import type { TypeCtaSkeleton } from '../types/contentful'
import type { Entry } from 'contentful'

import ProvinceModal from '../components/ProvinceModal.astro'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const { title, description, className, pageSlug } = Astro.props
const tagLine = `- ${t('siteName')}`
const base = import.meta.env.BASE_URL
const locale = lang === 'fr' ? 'fr-CA' : 'en-CA'

const needhelpRes = await contentfulClient.getEntries<TypeNeedHelpSkeleton>({
  skip: 0,
  limit: 1,
  content_type: 'needHelp',
  locale
})
let needhelp = needhelpRes.items[0]?.fields

const ctaProvinceModalId = '1Tzqvxdjr14tlBvI7pHKiQ'
const ctaProvinceModal: Entry<TypeCtaSkeleton> =
  await contentfulClient.getEntry(ctaProvinceModalId, {
    locale // Replace with the desired locale
  })
---

<!doctype html>
<html lang={locale}>
  <head>
    <meta charset='UTF-8' />
    <meta name='generator' content={Astro.generator} />
    <meta charset='utf-8' />
    <meta name='viewport' content='width=device-width,initial-scale=1' />
    <title>
      {title}
      {tagLine}
    </title>
    <meta name='description' content={description} />
    <link
      rel='apple-touch-icon'
      sizes='180x180'
      href=`${base}favicons/apple-touch-icon.png`
    />
    <link
      rel='icon'
      type='image/png'
      sizes='32x32'
      href=`${base}favicons/favicon-32x32.png`
    />
    <link
      rel='icon'
      type='image/png'
      sizes='16x16'
      href=`${base}favicons/favicon-16x16.png`
    />
    <link rel='manifest' href=`${base}favicons/site.webmanifest` />
    <link
      rel='mask-icon'
      href=`${base}favicons/safari-pinned-tab.svg`
      color='#5bbad5'
    />
    <link rel='shortcut icon' href=`${base}favicons/favicon.ico` />
    <meta name='msapplication-TileColor' content='#da532c' />
    <script
      src='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js'
      integrity='sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM'
      crossorigin='anonymous'></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || []
      function gtag() {
        dataLayer.push(arguments)
      }
    </script>
    <script is:inline>
      ;(function (w, d, s, l, i) {
        w[l] = w[l] || []
        w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' })
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != 'dataLayer' ? '&l=' + l : ''
        j.async = true
        j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl
        f.parentNode.insertBefore(j, f)
      })(window, document, 'script', 'dataLayer', 'GTM-XX5Z37M4QXX')
    </script>
  </head>

  <body class={`light-theme ${className}`}>
    <noscript>
      <iframe
        src={`https://www.googletagmanager.com/ns.html?id=${'GTM-XX5Z37M4QXX'}`}
        height='0'
        width='0'
        style='display:none;visibility:hidden'
      >
      </iframe>
    </noscript>
    <a class='skip-link' href='#maincontent'>{t('skip')}</a>
    <Header pageSlug={pageSlug} />

    <slot />

    <aside class='need-help d-print-none' id='need-help'>
      <p class='xsmall'>
        <strong class='h6'>{needhelp?.title}</strong><br />
        <a href={needhelp?.ctaUrl}>{needhelp?.cta}</a>
      </p>
      <button class='close' type='button' aria-label={t(`helpARIAClose`)}>
        <span aria-hidden='true'>Ã—</span>
      </button>
    </aside>
    <Footer />
    <div id='new_window' hidden=''>{t('newwindow')}</div>
    <button
      class='btn btn-tertiary btn-lg d-print-none'
      id='btnTop'
      title={t('topTitle')}
      aria-label={t('topAria')}>{t('top')}</button
    >
    <ProvinceModal
      title={ctaProvinceModal?.fields?.title as string}
      body={ctaProvinceModal?.fields?.content as string}
    />
  </body>
</html>

<script>
  import { addPostHandlerListener } from '../lib/provinceChangeHandler.js'
  import updateExternalLinks from '../lib/externalLinks'
  import goToTop from '../lib/gototop'
  import help from '../lib/help'
  import showProvincialDataOnly from '../lib/filterContent'
  import { provinceSelectionDispatcher } from '../lib/PriorityEventDispatcher'

  provinceSelectionDispatcher.subscribe(() => {
    console.log('Layout handler executed')
  }, 10)

  showProvincialDataOnly()
  provinceSelectionDispatcher.dispatch()
  addPostHandlerListener(() => {
    showProvincialDataOnly()
    provinceSelectionDispatcher.dispatch()
  })
  updateExternalLinks()
  goToTop()
  help()
</script>
