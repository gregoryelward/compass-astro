---
interface Props {
  title: string
  description: string
  className: string
  pageSlug?: string
}
import { getLangFromUrl, useTranslations } from '../i18n/utils'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import '../styles/sass/styles.scss'
import { contentfulClient } from '../lib/contentful'
import type { TypeNeedHelpSkeleton } from '../types/contentful/TypeNeedHelp'
import type { TypeCtaSkeleton } from '../types/contentful'
import type { Entry } from 'contentful'

import data from '../lib/jurisdictions.json'
import { marked } from 'marked'
import ProvinceModal from '../components/ProvinceModal.astro'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const { title, description, className, pageSlug } = Astro.props
const tagLine = `- ${t('siteName')}`
const base = import.meta.env.BASE_URL
const locale = lang === 'fr' ? 'fr-CA' : 'en-CA'

const jurisdictions = data.jurisdictions[locale]
const needhelpRes = await contentfulClient.getEntries<TypeNeedHelpSkeleton>({
  skip: 0,
  limit: 1,
  content_type: 'needHelp',
  locale
})
let needhelp = needhelpRes.items[0]?.fields

const ctaProvinceModalId = '1Tzqvxdjr14tlBvI7pHKiQ'
const ctaProvinceModal: Entry<TypeCtaSkeleton> =
  await contentfulClient.getEntry(ctaProvinceModalId, {
    locale // Replace with the desired locale
  })
---

<!doctype html>
<html lang={locale}>
  <head>
    <meta charset='UTF-8' />
    <meta name='generator' content={Astro.generator} />
    <meta charset='utf-8' />
    <meta name='viewport' content='width=device-width,initial-scale=1' />
    <title>
      {title}
      {tagLine}
    </title>
    <meta name='description' content={description} />
    <link
      rel='apple-touch-icon'
      sizes='180x180'
      href=`${base}favicons/apple-touch-icon.png`
    />
    <link
      rel='icon'
      type='image/png'
      sizes='32x32'
      href=`${base}favicons/favicon-32x32.png`
    />
    <link
      rel='icon'
      type='image/png'
      sizes='16x16'
      href=`${base}favicons/favicon-16x16.png`
    />
    <link rel='manifest' href=`${base}favicons/site.webmanifest` />
    <link
      rel='mask-icon'
      href=`${base}favicons/safari-pinned-tab.svg`
      color='#5bbad5'
    />
    <link rel='shortcut icon' href=`${base}favicons/favicon.ico` />
    <meta name='msapplication-TileColor' content='#da532c' />
    <!-- <script
      src='https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js'
      integrity='sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj'
      crossorigin='anonymous'></script>
    <script
      src='https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js'
      integrity='sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN'
      crossorigin='anonymous'></script>
    <script
      src='https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js'
      integrity='sha384-+sLIOodYLS7CIrQpBjl+C7nPvqq+FbNUBDunl/OZv93DB7Ln/533i8e/mZXLi/P+'
      crossorigin='anonymous'></script> -->

    <!-- BOOTSTRAP 5 -->
    <link
      href='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css'
      rel='stylesheet'
      integrity='sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC'
      crossorigin='anonymous'
    />
    <script
      src='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js'
      integrity='sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM'
      crossorigin='anonymous'></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || []
      function gtag() {
        dataLayer.push(arguments)
      }
    </script>
    <script is:inline>
      ;(function (w, d, s, l, i) {
        w[l] = w[l] || []
        w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' })
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != 'dataLayer' ? '&l=' + l : ''
        j.async = true
        j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl
        f.parentNode.insertBefore(j, f)
      })(window, document, 'script', 'dataLayer', 'GTM-XX5Z37M4QXX')
    </script>
  </head>

  <body class={`light-theme ${className}`}>
    <noscript>
      <iframe
        src={`https://www.googletagmanager.com/ns.html?id=${'GTM-XX5Z37M4QXX'}`}
        height='0'
        width='0'
        style='display:none;visibility:hidden'
      >
      </iframe>
    </noscript>
    <a class='sr-only sr-only-focusable' href='#maincontent'>{t('skip')}</a>
    <Header pageSlug={pageSlug} />

    <slot />

    <aside class='need-help' id='need-help'>
      <p class='xsmall'>
        <strong class='h6'>{needhelp?.title}</strong><br />
        <a href={needhelp?.ctaUrl}>{needhelp?.cta}</a>
      </p>
      <button class='close' type='button' aria-label={t(`helpARIAClose`)}>
        <span aria-hidden='true'>Ã—</span>
      </button>
    </aside>
    <Footer />
    <div id='new_window' hidden=''>{t('newwindow')}</div>
    <button
      class='btn btn-tertiary btn-lg d-print-none'
      id='btnTop'
      title={t('topTitle')}
      aria-label={t('topAria')}>{t('top')}</button
    >
    <ProvinceModal
      title={ctaProvinceModal?.fields?.title as string}
      body={ctaProvinceModal?.fields?.content as string}
    />
    <!-- <div class='dialog-container js--dialog-container' id='dialog-001'>
      <div class='dialog'>
        <button
          class='btn bi js--close-dialog close-dialog'
          type='button'
          aria-label='Close'
          dialog-id='dialog-001'></button>
        <p class='h4'>{ctaProvinceModal?.fields?.title}</p>
        {
          ctaProvinceModal?.fields?.content ? (
            <div
              set:html={marked(
                ctaProvinceModal.fields?.content as unknown as string
              )}
            />
          ) : null
        }
        <div>
          <select class='custom-select custom-select-lg'>
            {
              jurisdictions.map((j) => (
                <option value={j.code}>{j.title}</option>
              ))
            }
          </select>
          <button class='submit btn btn-primary btn-lg' type='button'
            >{t(`select`)}</button
          >
        </div>
      </div>
    </div> -->
    <!-- <slot /> -->
  </body>
</html>

<!-- <script>
  import { provinceSelectionDispatcher } from '../lib/PriorityEventDispatcher'

  // Register a handler in the layout
  provinceSelectionDispatcher.subscribe(() => {
    console.log('Layout handler executed')
  }, 10)
</script> -->

<script>
  import { addPostHandlerListener } from '../lib/provinceChangeHandler.js'
  import updateExternalLinks from '../lib/externalLinks'
  import goToTop from '../lib/gototop'
  import help from '../lib/help'
  // import { filterContent } from '../lib/filterContent'
  import showProvincialDataOnly from '../lib/filterContent'
  import { provinceSelectionDispatcher } from '../lib/PriorityEventDispatcher'

  provinceSelectionDispatcher.subscribe(() => {
    console.log('Layout handler executed')
  }, 10)

  // console.log('layout calling showProvincialDataOnly')
  showProvincialDataOnly()
  provinceSelectionDispatcher.dispatch()
  addPostHandlerListener(() => {
    // console.log('LAYOUT HOOK')
    showProvincialDataOnly()
    // console.log('call the dispatch ')
    provinceSelectionDispatcher.dispatch()
  })
  updateExternalLinks()
  goToTop()
  help()

  // const provinceCode = JSON.parse(localStorage.getItem('province') || '') as
  //   | string
  //   | null
  // const provinceCode = JSON.parse(localStorage.getItem('province') || 'null') // Use 'null' instead of an empty string
  // if (!provinceCode) {
  //   const targetedDialog = document.getElementById('dialog-001')
  //   if (targetedDialog) {
  //     targetedDialog.classList.add('is-open')
  //   }

  //   const modalSelect =
  //     document.querySelector<HTMLSelectElement>('#dialog-001 select')
  //   const modalSubmit = document.querySelector<HTMLButtonElement>(
  //     '#dialog-001 button.submit'
  //   )

  //   if (modalSelect && modalSubmit) {
  //     modalSubmit.addEventListener('click', function (event) {
  //       if (modalSelect.value) {
  //         localStorage.setItem('province', JSON.stringify(modalSelect.value))

  //         const targetedDialog = document.getElementById('dialog-001')
  //         if (targetedDialog) {
  //           targetedDialog.classList.remove('is-open')
  //         }

  //         const provinceSelect = document.getElementById('navbarDropdown2')
  //         if (provinceSelect) {
  //           provinceSelect.textContent =
  //             modalSelect.options[modalSelect.selectedIndex].text
  //         }

  //         filterContent(modalSelect.value)
  //         provinceSelectionDispatcher.dispatch()
  //       }
  //     })
  //   }
  // }
</script>
