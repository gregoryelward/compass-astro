---
// import prepareThemeToggle from "../lib/themeToggle";

// console.log("prepareThemeToggle ", prepareThemeToggle);
interface Props {
  title: string
  description: string
  className: string
  pageSlug?: string
}
import { getLangFromUrl, useTranslations } from '../i18n/utils'
// import LanguagePicker from "../components/LanguagePicker.astro";
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import '../styles/sass/styles.scss'
import { contentfulClient } from '../lib/contentful'
import type { TypeNeedHelpSkeleton } from '../types/contentful/TypeNeedHelp'
const lang = getLangFromUrl(Astro.url)
// const langSlug = lang === 'en' ? '' : `${lang}/`
const t = useTranslations(lang)
const { title, description, className, pageSlug } = Astro.props
const tagLine = `- ${t('siteName')}`
const base = import.meta.env.BASE_URL
const locale = lang === 'fr' ? 'fr-CA' : 'en-CA'

const needhelpRes = await contentfulClient.getEntries<TypeNeedHelpSkeleton>({
  skip: 0,
  limit: 1,
  content_type: 'needHelp',
  locale
})
let needhelp = needhelpRes.items[0]?.fields
---

<!doctype html>
<html lang={locale}>
  <head>
    <meta charset='UTF-8' />
    <meta name='generator' content={Astro.generator} />
    <meta charset='utf-8' />
    <meta name='viewport' content='width=device-width,initial-scale=1' />
    <title>
      {title}
      {tagLine}
    </title>
    <meta name='description' content={description} />
    <link
      rel='apple-touch-icon'
      sizes='180x180'
      href=`${base}favicons/apple-touch-icon.png`
    />
    <link
      rel='icon'
      type='image/png'
      sizes='32x32'
      href=`${base}favicons/favicon-32x32.png`
    />
    <link
      rel='icon'
      type='image/png'
      sizes='16x16'
      href=`${base}favicons/favicon-16x16.png`
    />
    <link rel='manifest' href=`${base}favicons/site.webmanifest` />
    <link
      rel='mask-icon'
      href=`${base}favicons/safari-pinned-tab.svg`
      color='#5bbad5'
    />
    <link rel='shortcut icon' href=`${base}favicons/favicon.ico` />
    <meta name='msapplication-TileColor' content='#da532c' />
    <script
      src='https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js'
      integrity='sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj'
      crossorigin='anonymous'></script>
    <script
      src='https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js'
      integrity='sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN'
      crossorigin='anonymous'></script>
    <script
      src='https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js'
      integrity='sha384-+sLIOodYLS7CIrQpBjl+C7nPvqq+FbNUBDunl/OZv93DB7Ln/533i8e/mZXLi/P+'
      crossorigin='anonymous'></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || []
      function gtag() {
        dataLayer.push(arguments)
      }
    </script>
    <script is:inline>
      ;(function (w, d, s, l, i) {
        w[l] = w[l] || []
        w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' })
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != 'dataLayer' ? '&l=' + l : ''
        j.async = true
        j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl
        f.parentNode.insertBefore(j, f)
      })(window, document, 'script', 'dataLayer', 'GTM-XX5Z37M4QXX')
    </script>
  </head>

  <body class={`light-theme ${className}`}>
    <noscript>
      <iframe
        src={`https://www.googletagmanager.com/ns.html?id=${'GTM-XX5Z37M4QXX'}`}
        height='0'
        width='0'
        style='display:none;visibility:hidden'
      >
      </iframe>
    </noscript> 
    <a class="sr-only sr-only-focusable" href="#maincontent">{t('skip')}</a>
    <Header pageSlug={pageSlug} />
   
    <slot />
    <aside class='need-help' id='need-help'>
      <p class='xsmall'>
        <strong class='h6'>{needhelp?.title}</strong><br />
        <a href={needhelp?.ctaUrl}>{needhelp?.cta}</a>
      </p>
      <button class='close' type='button' aria-label={t(`helpARIAClose`)}>
        <span aria-hidden='true'>Ã—</span>
      </button>
    </aside>
    <Footer />
    <div id='new_window' hidden=''>{t('newwindow')}</div>
    <button
      class='btn btn-tertiary btn-lg d-print-none'
      id='btnTop'
      title={t('topTitle')}
      aria-label={t('topAria')}
      style='display: block;'>{t('top')}</button
    >
    <div class="dialog-container js--dialog-container is-Xopen" id="dialog-001"><div class="dialog"><button class="btn bi bi-x js--close-dialog close-dialog" type="button" aria-label="Close" dialog-id="dialog-001"></button><p class="h4">What province are you from?</p><p>Knowing your province helps us make this tool the best experience for you.</p><div><select class="custom-select custom-select-lg"><option value="AB">Alberta</option><option value="BC">British Columbia</option><option value="MB">Manitoba</option><option value="NB">New Brunswick</option><option value="NL">Newfoundland and Labrador</option><option value="NT">Northwest Territories</option><option value="NS">Nova Scotia</option><option value="NU">Nunavut</option><option value="ON">Ontario</option><option value="PE">Prince Edward Island</option><option value="QC">Quebec</option><option value="SK">Saskatchewan</option><option value="YT">Yukon</option></select><button class="submit btn btn-primary btn-lg" type="button">Select</button></div></div></div>
  </body>

  <script>
   
  </script>
</html>

<script>
  // import prepareThemeToggle from '../lib/themeToggle'
  import updateExternalLinks from '../lib/externalLinks'
  import goToTop from '../lib/gototop'
  import help from '../lib/help'
    import { filterContent } from '../lib/filterContent'
  import showProvincialDataOnly from '../lib/filterContent'



   console.log('LAYOUT CALL showProvincialDataOnly() ')
  showProvincialDataOnly()

  const provinceList = document.querySelector(
    '#navbarDropdown2 + ul.dropdown-menu'
  ) as HTMLElement

  provinceList.addEventListener('click', function (event) {
    event.preventDefault()
    const targetElement = event.target
    //@ts-ignore
    const closest = targetElement?.closest('.js--sub-link')
    if (closest) {
      const provinceCode = closest.getAttribute('data-province') as string
      console.log('FILTER F')
      filterContent(provinceCode)
    }
    // console.log('in resourcepage calling showProvincialDataOnly()')
    // showProvincialDataOnly()

    // console.log('in resourcepage calling hideEmptyAgency()')
    // hideEmptyAgency()
  })

  updateExternalLinks()
  goToTop()
  help()


   /****************************************BEGIN****************************************************** */
/*
Check the local storage for a province.
Show modal form for province seletion if not value.
Close the modal if selection made
Update the selected province in the main menu
*/


// const provinceCode = JSON.parse(localStorage.getItem("province"))
// if (!provinceCode) {
//   const targetedDialog = document.getElementById("dialog-001")
//   targetedDialog.classList.add("is-open")

//   const modalSelect = document.querySelector("#dialog-001 select")
//   const modalSubmit = document.querySelector("#dialog-001 button.submit")

//   modalSubmit.addEventListener("click", function (event) {
//     if (modalSelect.value) {
//       localStorage.setItem("province", JSON.stringify(modalSelect.value))

//       const targetedDialog = document.getElementById("dialog-001")
//       targetedDialog.classList.remove("is-open")

//       // set the province name value in the main menu province dropdwon
//       provinceSelect.textContent =
//         modalSelect.options[modalSelect.selectedIndex].text
//       // provinceSelect.textContent = strUser =
//       //   modalSelect.options[modalSelect.selectedIndex].text

//       //TODO call onchange on drop down
//       filterContent(modalSelect.value)
//     }
//   })
// }

const provinceCode = JSON.parse(localStorage.getItem("province") || "null") as string | null;

if (!provinceCode) {
  const targetedDialog = document.getElementById("dialog-001");
  if (targetedDialog) {
    targetedDialog.classList.add("is-open");
  }

  const modalSelect = document.querySelector<HTMLSelectElement>("#dialog-001 select");
  const modalSubmit = document.querySelector<HTMLButtonElement>("#dialog-001 button.submit");

  if (modalSelect && modalSubmit) {
    modalSubmit.addEventListener("click", function (event) {
      if (modalSelect.value) {
        localStorage.setItem("province", JSON.stringify(modalSelect.value));

        const targetedDialog = document.getElementById("dialog-001");
        if (targetedDialog) {
          targetedDialog.classList.remove("is-open");
        }

        // Set the province name value in the main menu province dropdown
        // const provinceSelect = document.querySelector<HTMLElement>("#main-menu .province-select");
          const provinceSelect = document.getElementById("navbarDropdown2")
        if (provinceSelect) {
          provinceSelect.textContent =
            modalSelect.options[modalSelect.selectedIndex].text;
        }

        // TODO: call onchange on drop down
        console.log('FILTER B')
        filterContent(modalSelect.value);
      }
    });
  }
}


   /****************************************END****************************************************** */
  // prepareThemeToggle()
</script>
