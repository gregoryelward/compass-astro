---
import { marked } from 'marked'
import { gfmHeadingId } from 'marked-gfm-heading-id'
import Layout from '../layouts/Layout.astro'
import { contentfulClient } from '../lib/contentful'
import type { Entry } from 'contentful'
import type { TypeGlossarySkeleton } from '../types/contentful/TypeGlossary'
import type { TypePageSkeleton } from '../types/contentful/TypePage'
import Feedback from '../components/Feedback.astro'

export async function getStaticPaths() {
  let paths = []

  const LOCALES = ['en-CA', 'fr-CA']
  for (const locale of LOCALES) {
    const pageres = await contentfulClient.getEntries<TypePageSkeleton>({
      content_type: 'page',
      locale,
      'fields.slug': 'glossary'
    })

    const page = pageres.items[0]

    const res = await contentfulClient.getEntries<TypeGlossarySkeleton>({
      content_type: 'glossary',
      locale,
      skip: 0,
      limit: 300,
      order: ['fields.term'] // Use array syntax for the order
    })

    const glossaryItems = res.items

    paths.push({
      params: {
        glossary: `${locale === 'en-CA' ? page.fields.slug : `fr/${page.fields.slug}`}`
      },
      props: {
        glossaryItems: [...glossaryItems],
        page: pageres?.items[0] ? pageres.items[0] : null
      }
    })
  }
  return paths
}

const options = {
  prefix: 'my-prefix-'
}

marked.use(gfmHeadingId(options))
const glossaryItems = Astro.props.glossaryItems as Array<
  Entry<TypeGlossarySkeleton>
>
const alphabet = [
  'A',
  'B',
  'C',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  'Q',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z'
]

type GlossaryGroups = Record<string, Array<Entry<TypeGlossarySkeleton>>>

const glossaryGroups: GlossaryGroups = alphabet.reduce((target, key) => {
  target[key] = [] // Initialize each letter key with an empty array
  return target
}, {} as GlossaryGroups)

for (const [key] of Object.entries(glossaryGroups)) {
  const letterTerms = glossaryItems.filter((t) => {
    const term = t?.fields?.term
    if (typeof term !== 'string') return false // Explicit check for `string`
    return term?.charAt(0).toUpperCase() === key
  })
  glossaryGroups[key] = [...letterTerms]
}
---

<Layout
  title={Astro.props.page?.fields?.title as string}
  description={Astro.props.page?.fields.metaDescription as string}
  className=''
  pageSlug='glossary'
>
  <main class={`page glossary`} id='maincontent' data-page-category=''>
    <div class='container'>
      <section class='section'>
        <div class='row justify-content-md-center'>
          <div class='col-12 col-md-10'>
            <h1><strong>{Astro.props.page?.fields?.title}</strong></h1>
          </div>
        </div>
      </section>
    </div>
    <div class='bg-light--alt lt-border-t-light'>
      <div class='container'>
        <section class='section'>
          <div class='row justify-content-md-center'>
            <div class='col-12'>
              <div class='glossary links d-flex justify-content-md-center'>
                <strong>
                  {
                    Object.keys(glossaryGroups)?.map((key) => {
                      return glossaryGroups[key].length > 0 ? (
                        <a href={`#${key}`}>{key}</a>
                      ) : (
                        <span>{key}</span>
                      )
                    })
                  }
                </strong>
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>
    <div class='lt-border-t-light'>
      <div class='container'>
        <section class='section'>
          <div class='row justify-content-md-center'>
            <div class='col-12'>
              {
                Object.keys(glossaryGroups)
                  ?.filter((key) => glossaryGroups[key].length > 0)
                  .map((key) => {
                    return (
                      <section>
                        <h2 id={`${key}`} class='h3'>
                          {key}
                        </h2>
                        <dl class='glossary'>
                          {glossaryGroups[key].map((g) => {
                            return (
                              <>
                                <dt>{g.fields.term}</dt>
                                <dd
                                  set:html={marked(
                                    g.fields.definition as string
                                  )}
                                />
                              </>
                            )
                          })}
                        </dl>
                      </section>
                    )
                  })
              }
            </div>
          </div>
        </section>
      </div>
    </div>
    <Feedback />
  </main>
</Layout>
