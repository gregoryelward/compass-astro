---
import { marked } from 'marked'
import { gfmHeadingId } from 'marked-gfm-heading-id'
import Layout from '../layouts/Layout.astro'
import { contentfulClient } from '../lib/contentful'
import type { Entry } from 'contentful'
import type { TypeBenefitSkeleton } from '../types/contentful/TypeBenefit'
import getJurisdiction from '../lib/jurisdictions'
import type { TypeStepsSkeleton } from '../types/contentful/TypeSteps'
import makeUrl from '../lib/helpers'
import { getLangFromUrl, useTranslations } from '../i18n/utils'
import type { TypeBenefitPageSkeleton } from '../types/contentful/TypeBenefitPage'

export async function getStaticPaths() {
  let paths = []
  const LOCALES = ['en-CA', 'fr-CA']
  for (const locale of LOCALES) {
    const benefitRes = await contentfulClient.getEntries<TypeBenefitSkeleton>({
      content_type: 'benefit',
      locale
    })

    const benefits = benefitRes.items
    for (const i of benefits) {
      // get jurisdiction

      const benefitPages = i.fields.benefitPages as Array<
        Entry<TypeBenefitPageSkeleton>
      >
      const applyPage = benefitPages.filter(
        (p) => p.fields.slug === 'apply' || p.fields.slug === 'how-to-apply'
      )[0] as Entry<TypeBenefitPageSkeleton>
      const jurisdiction = getJurisdiction(i.fields.authority, locale)
      const jurisdictionSlug = jurisdiction?.slug
      let path = locale === 'en-CA' ? '' : `/fr`
      if (jurisdictionSlug) {
        path = path + '/' + jurisdictionSlug
      }
      path = path + '/' + i.fields.slug

      path = path + '/' + applyPage.fields.slug

      const benefitApplySteps = i.fields.steps?.filter(Boolean) as Array<
        Entry<TypeStepsSkeleton>
      >
      // console.log('steps length ', benefitApplySteps.length)
      let index = 1
      for (const b of benefitApplySteps) {
        paths.push({
          params: {
            benefitstepno: `${path}/step-${index}-no`
          },
          props: { page: { ...b }, benefit: { ...i }, index, applyPage }
        })
        index = index + 1
      }
    }
  }
  return paths
}

const options = {
  prefix: 'my-prefix-'
}

marked.use(gfmHeadingId(options))

const lang = getLangFromUrl(Astro.url)
const langSlug = lang === 'en' ? '' : `${lang}/`
const t = useTranslations(lang)
const locale = lang === 'fr' ? 'fr-CA' : 'en-CA'

const page = Astro.props.page as Entry<TypeStepsSkeleton>
const benefit = Astro.props.benefit as Entry<TypeBenefitSkeleton>
const stepIndex = Astro.props.index
const applyPage = Astro.props.applyPage

const base = import.meta.env.BASE_URL
---

<Layout title={page?.fields?.title as string} description={''} className='step'>
  <main
    class='step page'
    id='maincontent'
    data-page-title={page?.fields?.title as string}
    data-page-category='step'
  >
    <div class='container'>
      <div class='row justify-content-md-center'>
        <div class='col-12 col-md-10'>
          <nav aria-label='breadcrumb'>
            <ol class='breadcrumb'>
              <li class='breadcrumb-item'>
                <a class='breadcrumb-item' href={`${makeUrl(base, locale)}`}
                  >{t('home')}</a
                >
              </li>
              <li class='breadcrumb-item'>
                <a
                  class='breadcrumb-item'
                  href={`${makeUrl(
                    base,
                    locale,
                    getJurisdiction(benefit.fields.authority, locale)?.slug,
                    benefit?.fields?.slug as string
                  )}`}
                >
                  {benefit?.fields?.title}
                </a>
              </li>
              <li class='breadcrumb-item'>
                <a
                  class='breadcrumb-item'
                  href={`${makeUrl(
                    base,
                    locale,
                    getJurisdiction(benefit.fields.authority, locale)?.slug,
                    benefit?.fields?.slug as string,
                    'apply'
                  )}`}
                >
                  {applyPage?.fields?.title}
                </a>
              </li>
              <li class='active breadcrumb-item' aria-current='page'>
                {`Step ${stepIndex}`}
              </li>
            </ol>
          </nav>
        </div>
      </div>
    </div>
    <div class='container'>
      <section class='section'>
        <div class='row justify-content-md-center'>
          <div class='col-12 col-md-10'>
            <div class='category h6 d-print-none'>
              {benefit.fields?.acronym}
            </div>
            <div class='mb-3 pb-3'></div>
            <h1>
              <strong>
                {`${t('step')} ${stepIndex} - ${benefit.fields?.title}`}
              </strong>
            </h1>
            <h2>{page.fields?.title}</h2>

            {
              page.fields?.noAnswer ? (
                <div class='bg-secondary p-3 step answer no d-none'>
                  {page.fields.noAnswer}
                </div>
              ) : null
            }
            {
              page.fields?.notSure ? (
                <div class='bg-secondary p-3 step answer dontknow d-none'>
                  {page.fields.notSure}
                </div>
              ) : null
            }
          </div>
        </div>
      </section>
    </div>

    <div class='bg-white lt-border-t-light'>
      <div class='container'>
        <section class='section'>
          <div class='row'>
            <div class='col-12'>
              {
                page.fields?.content ? (
                  <div
                    class='js-accordion'
                    set:html={marked(page.fields.content as string)}
                  />
                ) : null
              }
              {
                page?.fields?.qAndA ? (
                  <div
                    class='js-accordion'
                    set:html={marked(page.fields.qAndA as string)}
                  />
                ) : null
              }
              {
                page?.fields?.aside ? (
                  <div
                    class='js-accordion'
                    set:html={marked(page.fields.aside as string)}
                  />
                ) : null
              }
            </div>
          </div>
          <a
            class='btn btn-tertiary btn-lg btn-icon-left bi bi-play-fill'
            href={`${makeUrl(base, locale, 'apply', `step-${stepIndex + 1}`)}`}
          >
            {t('continuesteppart1')}&nbsp;
            <strong>{t('continuesteppart2')}&nbsp;{stepIndex + 1}</strong>
          </a>
        </section>
      </div>
    </div>

    <div class='bg-white lt-border-t-light'>
      <div class='container'>
        <section class='section'>
          <div class='row'>
            <div class='col-12'>
              <h2 class='h5' id='steps-title'>{t('steps')}</h2>
              <nav aria-labelledby='steps-title'>
                <ul class='pagination'>
                  {
                    benefit?.fields?.steps
                      ? //@ts-ignore
                        benefit.fields.steps
                          //@ts-ignore
                          ?.filter(Boolean)
                          .map((s: TypeStepsSkeleton, index: number) => {
                            return (
                              <li
                                class={`page-item ${stepIndex - 1 === index ? 'active' : ''}`}
                              >
                                <a
                                  class='page-link'
                                  href={`${makeUrl(base, locale, 'apply', `step-${index + 1}`)}`}
                                >
                                  {index + 1}
                                </a>
                              </li>
                            )
                          })
                      : null
                  }
                </ul>
              </nav>
            </div>
          </div>
        </section>
      </div>
    </div>
  </main>
</Layout>

<script>
  import accordion from '../lib/accordion'

  function showNegativeResponse() {
    try {
      const NO = 'n'
      const DONT_KNOW = 'd'

      const queryString = window.location.search
      const urlParams = new URLSearchParams(queryString)

      const answer = urlParams.get('a')
      if (answer === NO) {
        const el = document.querySelector('.answer.no')
        el?.classList.remove('d-none')
      }
      if (answer === DONT_KNOW) {
        const el = document.querySelector('.answer.dontknow')
        el?.classList.remove('d-none')
      }
    } catch (error) {
      console.log('error ', error)
    }
  }
  showNegativeResponse()
  accordion('.js-accordion h2', 'H2', 2)
  accordion('.js-accordion h3', 'H3', 3)
</script>
