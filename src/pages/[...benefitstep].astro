---
import { marked } from 'marked'
import { gfmHeadingId } from 'marked-gfm-heading-id'
import Layout from '../layouts/Layout.astro'
import { contentfulClient } from '../lib/contentful'
import type { Entry } from 'contentful'
import type { TypeBenefitSkeleton } from '../types/contentful/TypeBenefit'
import getJurisdiction from '../lib/jurisdictions'
import type { TypeStepsSkeleton } from '../types/contentful/TypeSteps'
import makeUrl from '../lib/helpers'
import { getLangFromUrl, useTranslations } from '../i18n/utils'
import type { TypeBenefitPageSkeleton } from '../types/contentful/TypeBenefitPage'
import type { TypeCtaSkeleton } from '../types/contentful'
import OtherBenefits from '../components/OtherBenefits.astro'

export async function getStaticPaths() {
  let paths = []
  const LOCALES = ['en-CA', 'fr-CA']
  for (const locale of LOCALES) {
    const benefitRes = await contentfulClient.getEntries<TypeBenefitSkeleton>({
      content_type: 'benefit',
      locale
    })


    const ctaOtherBenefitsyId = 'vbcbiuCwY8oajVj8Q9x2P';
    const ctaOtherBenefits :Entry<TypeCtaSkeleton>= await contentfulClient.getEntry(ctaOtherBenefitsyId, {
  locale, // Replace with the desired locale
});
      
    const benefits = benefitRes.items
    for (const i of benefits) {
      const benefitPages = i.fields.benefitPages as Array<
        Entry<TypeBenefitPageSkeleton>
      >
      const applyPage = benefitPages.filter(
        (p) => p.fields.slug === 'apply' || p.fields.slug === 'how-to-apply'
      )[0] as Entry<TypeBenefitPageSkeleton>
      const jurisdiction = getJurisdiction(i.fields.authority, locale)
      const jurisdictionSlug = jurisdiction?.slug
      let path = locale === 'en-CA' ? '' : `/fr`
      if (jurisdictionSlug) {
        path = path + '/' + jurisdictionSlug
      }
      // path = path + '/' + "how-to-apply"
      // /alberta/assured-income-for-the-severely-handicapped/how-to-apply/step-1
      path = path + '/' + i.fields.slug

      // path = path + '/' + "how-to-apply"
      path = path + '/' + applyPage.fields.slug

      // console.log("path ",path)

      const benefitApplySteps = i.fields.steps?.filter(Boolean) as Array<
        Entry<TypeStepsSkeleton>
      >
      let index = 1
      // let navigationIndex = 0
      const navigationIndex = 2 //fixed
      for (const b of benefitApplySteps) {
        paths.push({
          params: {
            benefitstep: `${path}/step-${index}`
          },
          props: {
            page: { ...b },
            benefit: { ...i },
            index,
            applyPage,
            ctaOtherBenefits,
            navigationIndex,
            prevPage: benefitPages[navigationIndex], //steps
            // prevPage: benefitPages[navigationIndex - 1],
            nextPage: benefitPages[navigationIndex + 1],
            allBenefits: benefits,
          }
        })
        // navigationIndex = navigationIndex + 1
        index = index + 1
      }
    }
  }
  return paths
}

const options = {
  prefix: 'my-prefix-'
}

marked.use(gfmHeadingId(options))

const lang = getLangFromUrl(Astro.url)
// const langSlug = lang === 'en' ? '' : `${lang}/`
const t = useTranslations(lang)
const locale = lang === 'fr' ? 'fr-CA' : 'en-CA'

const page = Astro.props.page as Entry<TypeStepsSkeleton>
const benefit = Astro.props.benefit as Entry<TypeBenefitSkeleton>
const stepIndex = Astro.props.index
const applyPage = Astro.props.applyPage

const navigationIndex = Astro.props.navigationIndex
const prevPage = Astro.props.prevPage
const nextPage = Astro.props.nextPage

const ctaOtherBenefits = Astro.props.ctaOtherBenefits
const allBenefits = Astro.props.allBenefits

const isLastStep = benefit?.fields?.steps?.length === stepIndex
const base = import.meta.env.BASE_URL
---

<Layout title={page?.fields?.title as string} description={''} className='step'>
  <main
    class='step page'
    id='maincontent'
    data-page-title={page?.fields?.title as string}
    data-page-category='step'
  >
    <div class='container'>
      <div class='row justify-content-md-center'>
        <div class='col-12 col-md-10'>
          <nav aria-label='breadcrumb'>
            <ol class='breadcrumb'>
              <li class='breadcrumb-item'>
                <a class='breadcrumb-item' href={`${makeUrl(base, locale)}`}>
                  {t('home')}
                </a>
              </li>
              <li class='breadcrumb-item'>
                <a
                  class='breadcrumb-item'
                  href={`${makeUrl(
                    base,
                    locale,
                    getJurisdiction(benefit.fields.authority, locale)?.slug,
                    benefit?.fields?.slug as string
                  )}`}
                >
                  {benefit?.fields?.title}
                </a>
              </li>
              <li class='breadcrumb-item'>
                <a
                  class='breadcrumb-item'
                  href={`${makeUrl(
                    base,
                    locale,
                    getJurisdiction(benefit.fields.authority, locale)?.slug,
                    benefit?.fields?.slug as string,
                    // 'apply'
                    applyPage.fields.slug
                  )}`}
                >
                  {applyPage?.fields?.title}
                </a>
              </li>
              <li class='active breadcrumb-item' aria-current='page'>
                {`Step ${stepIndex}`}
              </li>
            </ol>
          </nav>
        </div>
      </div>
    </div>
    <div class='container'>
      <section class='section'>
        <div class='row justify-content-md-center'>
          <div class='col-12 col-md-10'>
            {
              benefit?.fields?.acronym ? (
                <div class='category h6 d-print-none'>
                  {benefit.fields.acronym}
                </div>
              ) : null
            }
            <!-- <div class='mb-3 pb-3'></div> -->
            <h1><strong>{`${t('step')} ${stepIndex}`}</strong></h1>
            {page?.fields?.introduction ? (
            <div set:html={marked(page.fields.introduction as string)} />
              ) : null
            }

   <!-- <p>{JSON.stringify(page?.fields?.customStep)}</p> -->
            {page?.fields?.customStep ? (
                 <hr class='hr-light' />
              <div class='js-accordion'>
                <div set:html={marked(page.fields.customStep as string)} />
              </div>
                ) : null
            }
            <hr class='hr-light' />
            {
              !page?.fields?.customStep && !isLastStep ? (
                <div class='pro-card--top-border pro-card--orange-outline'>
                  <p class='large'>{page?.fields?.title}</p>
                  <a
                    class='btn btn-primary btn-lg'
                    href={`${makeUrl(
                      base,
                      locale,
                      getJurisdiction(benefit.fields.authority, locale)?.slug,
                      benefit?.fields?.slug as string,
                      // 'apply'
                    applyPage.fields.slug,
                      `step-${stepIndex + 1}?a=y`
                    )}`}
                  >
                    {t('yes')}
                  </a>
                  <a
                    class='btn btn-primary btn-lg'
                    href={`${makeUrl(
                      base,
                      locale,
                      getJurisdiction(benefit.fields.authority, locale)?.slug,
                      benefit?.fields?.slug as string,
                      // 'apply'
                    applyPage.fields.slug,
                      `step-${stepIndex}-no?a=n`
                    )}`}
                  >
                    {t('no')}
                  </a>
                  {page?.fields?.notSure ? <a
                    class='btn btn-primary btn-lg'
                    href={`${makeUrl(
                      base,
                      locale,
                      getJurisdiction(benefit.fields.authority, locale)?.slug,
                      benefit?.fields?.slug as string,
                      // 'apply'
                    applyPage.fields.slug,
                      `step-${stepIndex}-no?a=d`
                    )}`}
                  >
                    {t('notsure')}
                  </a> : null }
                  <div class='mb-3' />
                </div>
              ) : page?.fields?.content ? (
                <div set:html={marked(page.fields.content as string)} />
              ) : null
            }
            <hr class="hr-light" />
            <h2 class='h5' id='steps-title'>{t('steps')}</h2>
            <nav aria-labelledby='steps-title'>
              <ul class='pagination'>
                {
                  benefit?.fields?.steps
                    ? //@ts-ignore
                      benefit.fields.steps
                        //@ts-ignore
                        ?.filter(Boolean)
                        .map((s: TypeStepsSkeleton, index: number) => {
                          return (
                            <li
                              class={`page-item ${stepIndex - 1 === index ? 'active' : ''}`}
                            >
                              <a
                                class='page-link'
                                href={`${makeUrl(
                                  base,
                                  locale,
                                  getJurisdiction(
                                    benefit.fields.authority,
                                    locale
                                  )?.slug,
                                  benefit?.fields?.slug as string,
                                  // 'apply'
                    applyPage.fields.slug,
                                  `step-${index + 1}`
                                )}`}
                              >
                                {index + 1}
                              </a>
                            </li>
                          )
                        })
                    : null
                }
              </ul>
            </nav>
          </div>
        </div>
      </section>
    </div>

    <div class='xbg-white lt-border-t-light'>
      <div class='container'>
        <section class='section'>
          <div class='flex center'>
            {
              navigationIndex === 0 ? (
                <a
                  class='btn btn-outline-secondary btn-lg btn-icon-left bi bi-arrow-left'
                  href={`${makeUrl(
                    base,
                    locale,
                    getJurisdiction(benefit.fields.authority, locale)?.slug,
                    benefit?.fields?.slug as string
                  )}`}
                >
                  {t('startBack')}
                </a>
              ) : (
                <a
                  class='btn btn-outline-secondary btn-lg btn-icon-left bi bi-arrow-left'
                  href={`${makeUrl(
                    base,
                    locale,
                    getJurisdiction(benefit.fields.authority, locale)?.slug,
                    benefit?.fields?.slug as string,
                    prevPage?.fields?.slug as string
                  )}`}
                >
                  {prevPage?.fields?.title}
                </a>
              )
            }
            {
              nextPage?.fields?.slug ? (
                <a
                  class='btn btn-lg btn-icon-right bi bi-arrow-right btn-primary'
                  href={`${makeUrl(
                    base,
                    locale,
                    getJurisdiction(benefit.fields.authority, locale)?.slug,
                    benefit?.fields?.slug as string,
                    nextPage?.fields?.slug as string
                  )}`}
                >
                  {nextPage.fields.title}
                </a>
              ) : null
            }
          </div>
        </section>
      </div>
    </div>
    
    <!-- {isLastStep ? <div>LAST STEP!</div> : null} -->


    {
      isLastStep ? (<div class="bg-light--alt">
      {/* <OtherBenefits ctaOtherBenefits={ctaOtherBenefits} allBenefits={allBenefits} base={base} locale={locale}/> */}
      <OtherBenefits ctaOtherBenefits={ctaOtherBenefits} allBenefits={allBenefits?.filter((b) => b.sys.id !== benefit.sys.id)} base={base} locale={locale}/>
    </div>) : null}

  
    <!-- {isLastStep ? <div class="bg-light--alt">
    <div class="container">
      <section class="section">
        <div class="row justify-content-md-center pt-3">
          <div class="col-12 cta key">
            <h2 class="mb-0">{ctaOtherBenefits?.fields?.title}</h2>
            <p>{ctaOtherBenefits?.fields?.content}</p>
            <div class="mb-3 pb-3"></div>
  
            {
                  allBenefits
                    ? allBenefits.map((b) => {
                        return (
                          <p
                            class='medium'
                            data-province-filter={
                              getJurisdiction(b.fields.authority)?.code || ''
                            }
                            data-province-hide-filter={
                              b.fields.hideForProvinces || ''
                            }
                          >
                            <a
                              class='medium'
                              href={`${makeUrl(base, locale, getJurisdiction(b.fields.authority, locale)?.slug, b.fields?.slug as string)}`}
                            >
                               {b.fields.title}
                            </a>
  
                            
                          </p>
                        )
                      })
                    : null
                }
            
          </div>
        </div>
      </section>
    </div>
  </div> : null} -->
  </main>
</Layout>


<script>
  import accordion from '../lib/accordion'
  accordion('.js-accordion h2', 'H2', 2)
</script>

