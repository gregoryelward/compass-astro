---
import type { Entry } from 'contentful'
import type { TypeAgencyResourceSkeleton } from '../types/contentful/TypeAgencyResource'
import { marked } from 'marked'
import getJurisdiction from '../lib/jurisdictions'
import type { TypeAgencySkeleton } from '../types/contentful'

interface Props {
  resources: Array<Entry<TypeAgencyResourceSkeleton>>
}

const { resources } = Astro.props

const resolvedAgencyResource = resources as
  | Entry<TypeAgencyResourceSkeleton>[]
  | undefined

let agencyResource = resolvedAgencyResource?.filter(Boolean).map((a) => {
  const agencyRecord = a?.fields?.agency as
    | Entry<TypeAgencySkeleton>
    | undefined
  const showLocalyOnly = agencyRecord?.fields?.showLocalyOnly
  const authority = agencyRecord?.fields?.authority
  const agency = agencyRecord?.fields?.title

  return {
    ...a?.fields,
    showLocalyOnly,
    authority,
    agency
  }
})

let groupedAgencyResources

if (agencyResource) {
  groupedAgencyResources = Object.groupBy(agencyResource, (resource) => {
    const title = resource.agency
    return typeof title === 'string' && title.trim() ? title : 'Unknown Agency' // Ensure a valid key
  })
}
---

{
  groupedAgencyResources
    ? Object.entries(groupedAgencyResources).map(
        ([agencyTitle, resources], index) => {
          if (!resources || resources.length === 0) return null // Handle undefined or empty resources

          return (
            <div
              class='benefitagencycomponent childresource'
              data-province-filter={
                resources[0]?.showLocalyOnly
                  ? getJurisdiction(resources[0]?.authority)?.code || ''
                  : ''
              }
            >
              <h3 id={`agency-resource-${index}`}>{agencyTitle}</h3>
              {resources
                ? resources.map((v) => {
                    return (
                      <div
                        data-province-filter={
                          v.showLocalyOnly
                            ? getJurisdiction(v.authority)?.code || ''
                            : ''
                        }
                      >
                        <h4 class='agency resource'>{v.title}</h4>
                        <div set:html={marked(v.content as string)} />
                        <hr />
                      </div>
                    )
                  })
                : null}
            </div>
          )
        }
      )
    : null
}

<style>
  .card-body p {
    margin-top: 1rem;
  }
</style>
<script>
  import { provinceSelectionDispatcher } from '../lib/PriorityEventDispatcher'
  function updateBenefitAgenciesVisibility() {
    // console.log('CALLED')
    document
      .querySelectorAll('.js-accordion.benefit-agency.parent')
      .forEach((parent) => {
        // Check if any child is visible

        // Check if the parent has at least one child with the desired criteria
        const hasMatchingChild = Array.from(
          parent.querySelectorAll('.benefitagencycomponent.childresource')
        ).some((child) => {
          return (child as HTMLElement).style.display !== 'none'
        })
        // // Hide the parent if no visible children
        if (!hasMatchingChild) {
          // console.log(
          //   'hide',
          //   (parent as HTMLElement).getAttribute('data-province-filter')
          // )
          ;(parent as HTMLElement).style.display = 'none' // Hide the parent
        } else {
          // console.log(
          //   'show',
          //   (parent as HTMLElement).getAttribute('data-province-filter')
          // )
          ;(parent as HTMLElement).style.display = 'block' // show the parent
        }
      })
  }

  provinceSelectionDispatcher.subscribe(() => {
    // console.log('Page handler executed')
    updateBenefitAgenciesVisibility()
    // document.querySelectorAll('.benefit-agency.parent').forEach((parent) => {
    //   // Check if the parent has at least one child with the desired criteria
    //   const hasMatchingChild = Array.from(
    //     parent.querySelectorAll('.benefitagencycomponent.childresource')
    //   ).some((child) => {
    //     return (child as HTMLElement).style.display !== 'none'
    //   })

    //   // console.log('parent has at least one visible child: ', hasMatchingChild)

    //   // Hide the parent if no visible children
    //   if (!hasMatchingChild) {
    //     // console.log('HIDE ', (parent as HTMLElement).innerText)
    //     ;(parent as HTMLElement).style.display = 'none' // Hide the parent
    //   } else {
    //     // console.log('SHOW ', (parent as HTMLElement).innerText)
    //     ;(parent as HTMLElement).style.display = 'block' // Hide the parent
    //   }
    // })
  }, 5)
  updateBenefitAgenciesVisibility()
  // document
  //   .querySelectorAll('.js-accordion.benefit-agency.parent')
  //   .forEach((parent) => {
  //     // Check if any child is visible

  //     // Check if the parent has at least one child with the desired criteria
  //     const hasMatchingChild = Array.from(
  //       parent.querySelectorAll('.benefitagencycomponent.childresource')
  //     ).some((child) => {
  //       return (child as HTMLElement).style.display !== 'none'
  //     })
  //     // // Hide the parent if no visible children
  //     if (!hasMatchingChild) {
  //       console.log(
  //         'hide',
  //         (parent as HTMLElement).getAttribute('data-province-filter')
  //       )
  //       ;(parent as HTMLElement).style.display = 'none' // Hide the parent
  //     } else {
  //       console.log(
  //         'show',
  //         (parent as HTMLElement).getAttribute('data-province-filter')
  //       )
  //       ;(parent as HTMLElement).style.display = 'block' // show the parent
  //     }
  //   })
</script>
