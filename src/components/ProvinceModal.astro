---
import { marked } from 'marked'
import { getLangFromUrl, useTranslations } from '../i18n/utils'
import data from '../lib/jurisdictions.json'
const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const locale = lang === 'fr' ? 'fr-CA' : 'en-CA'

const jurisdictions = data.jurisdictions[locale]

interface Props {
  title: string
  body: string
}

const { title, body } = Astro.props
---

<!-- <button
  class='btn btn-tertiary btn-lg d-print-none'
  id='btnTop'
  title={t('topTitle')}
  aria-label={t('topAria')}
  style='display: block;'>{t('top')}</button
> -->
<div class='dialog-container js--dialog-container' id='dialog-001'>
  <div class='dialog'>
    <button
      class='btn bi js--close-dialog close-dialog'
      type='button'
      aria-label='Close'
      dialog-id='dialog-001'></button>
    <p class='h4'>{title}</p>
    {body ? <div set:html={marked(body as unknown as string)} /> : null}
    <div>
      <select class='custom-select custom-select-lg'>
        {jurisdictions.map((j) => <option value={j.code}>{j.title}</option>)}
      </select>
      <button class='submit btn btn-primary btn-lg' type='button'
        >{t(`select`)}</button
      >
    </div>
  </div>
</div>

<script>
  // import { addPostHandlerListener } from '../lib/provinceChangeHandler.js'
  // import updateExternalLinks from '../lib/externalLinks'
  // import goToTop from '../lib/gototop'
  // import help from '../lib/help'
  import { filterContent } from '../lib/filterContent'
  // import showProvincialDataOnly from '../lib/filterContent'
  import { provinceSelectionDispatcher } from '../lib/PriorityEventDispatcher'

  // provinceSelectionDispatcher.subscribe(() => {
  //   console.log('Layout handler executed')
  // }, 10)

  // // console.log('layout calling showProvincialDataOnly')
  // showProvincialDataOnly()
  // provinceSelectionDispatcher.dispatch()
  // addPostHandlerListener(() => {
  //   // console.log('LAYOUT HOOK')
  //   showProvincialDataOnly()
  //   // console.log('call the dispatch ')
  //   provinceSelectionDispatcher.dispatch()
  // })
  // updateExternalLinks()
  // goToTop()
  // help()

  // const provinceCode = JSON.parse(localStorage.getItem('province') || '') as
  //   | string
  //   | null
  const provinceCode = JSON.parse(localStorage.getItem('province') || 'null') // Use 'null' instead of an empty string
  if (!provinceCode) {
    const targetedDialog = document.getElementById('dialog-001')
    if (targetedDialog) {
      targetedDialog.classList.add('is-open')
    }

    const modalSelect =
      document.querySelector<HTMLSelectElement>('#dialog-001 select')
    const modalSubmit = document.querySelector<HTMLButtonElement>(
      '#dialog-001 button.submit'
    )

    if (modalSelect && modalSubmit) {
      modalSubmit.addEventListener('click', function (event) {
        if (modalSelect.value) {
          localStorage.setItem('province', JSON.stringify(modalSelect.value))

          const targetedDialog = document.getElementById('dialog-001')
          if (targetedDialog) {
            targetedDialog.classList.remove('is-open')
          }

          const provinceSelect = document.getElementById('navbarDropdown2')
          if (provinceSelect) {
            provinceSelect.textContent =
              modalSelect.options[modalSelect.selectedIndex].text
          }

          filterContent(modalSelect.value)
          provinceSelectionDispatcher.dispatch()
        }
      })
    }
  }
</script>
